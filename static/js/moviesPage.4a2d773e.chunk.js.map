{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","views/MoviesPage/MoviesPage.jsx"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","defineProperty","getOwnPropertyDescriptors","defineProperties","MoviesPage","useState","query","setQuery","foundMovies","setFoundMovies","history","useHistory","location","useLocation","useParams","useEffect","search","fetchMovie","split","then","resp","onSubmit","e","preventDefault","onChange","currentTarget","value","name","MoviesList","movies"],"mappings":"2JAEA,SAASA,EAAQC,EAAQC,GACvB,IAAIC,EAAOC,OAAOD,KAAKF,GAEvB,GAAIG,OAAOC,sBAAuB,CAChC,IAAIC,EAAUF,OAAOC,sBAAsBJ,GACvCC,IAAgBI,EAAUA,EAAQC,QAAO,SAAUC,GACrD,OAAOJ,OAAOK,yBAAyBR,EAAQO,GAAKE,eAEtDP,EAAKQ,KAAKC,MAAMT,EAAMG,GAGxB,OAAOH,EAGM,SAASU,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAE/CA,EAAI,EACNf,EAAQI,OAAOc,IAAS,GAAMC,SAAQ,SAAUC,GAC9C,OAAAC,EAAA,GAAeP,EAAQM,EAAKF,EAAOE,OAE5BhB,OAAOkB,0BAChBlB,OAAOmB,iBAAiBT,EAAQV,OAAOkB,0BAA0BJ,IAEjElB,EAAQI,OAAOc,IAASC,SAAQ,SAAUC,GACxChB,OAAOiB,eAAeP,EAAQM,EAAKhB,OAAOK,yBAAyBS,EAAQE,OAKjF,OAAON,E,iDCYMU,UAxCI,WACjB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAUC,cACVC,EAAWC,cACFC,cAyBf,OATAC,qBAAU,WACgB,KAApBH,EAASI,SACXC,YAAWL,EAASI,OAAOE,MAAM,KAAK,IAAIC,MAAK,SAACC,GAAD,OAC7CX,EAAeW,MAEjBb,EAASK,EAASI,OAAOE,MAAM,KAAK,OAErC,CAACN,IAGF,gCACE,sBAAMS,SArBW,SAACC,GACpBA,EAAEC,iBACFN,YAAWX,GAAOa,MAAK,SAACC,GAAD,OAAUX,EAAeW,MAEhDV,EAAQnB,KAAR,OACKqB,GADL,IAEEI,OAAO,SAAD,OAAWV,OAejB,SACE,uBAAOkB,SA1BQ,SAACF,GACpBf,EAASe,EAAEG,cAAcC,QAyBUC,KAAK,QAAQD,MAAOpB,MAErD,cAACsB,EAAA,EAAD,CAAYC,OAAQrB","file":"static/js/moviesPage.4a2d773e.chunk.js","sourcesContent":["import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport MoviesList from \"../../components/MoviesList/MoviesList\";\r\nimport { fetchMovie } from \"../../services/movieApi\";\r\n\r\nconst MoviesPage = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [foundMovies, setFoundMovies] = useState([]);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const params = useParams();\r\n\r\n  const handleChange = (e) => {\r\n    setQuery(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchMovie(query).then((resp) => setFoundMovies(resp));\r\n\r\n    history.push({\r\n      ...location,\r\n      search: `query=${query}`,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location.search !== \"\") {\r\n      fetchMovie(location.search.split(\"=\")[1]).then((resp) =>\r\n        setFoundMovies(resp)\r\n      );\r\n      setQuery(location.search.split(\"=\")[1]);\r\n    }\r\n  }, [location]);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input onChange={handleChange} name=\"query\" value={query} />\r\n      </form>\r\n      <MoviesList movies={foundMovies} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviesPage;\r\n"],"sourceRoot":""}